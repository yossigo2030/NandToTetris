5 ./Math.jack
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int powersTwoArray;

    /** Initializes the library. */
    function void init() {
        let powersTwoArray = Array.new(16);
        let powersTwoArray[0] = 1;
        let powersTwoArray[1] = 2;
        let powersTwoArray[2] = 4;
        let powersTwoArray[3] = 8;
        let powersTwoArray[4] = 16;
        let powersTwoArray[5] = 32;
        let powersTwoArray[6] = 64;
        let powersTwoArray[7] = 128;
        let powersTwoArray[8] = 256;
        let powersTwoArray[9] = 512;
        let powersTwoArray[10] = 1024;
        let powersTwoArray[11] = 2048;
        let powersTwoArray[12] = 4096;
        let powersTwoArray[13] = 8192;
        let powersTwoArray[14] = 16384;
        let powersTwoArray[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x > 0){
            return x;
        }
        return -x;
    }

    /** Returns the product of x and y.
     * When a Jack compiler detects the multiplication operator '*' in the
     * program's code, it handles it by invoking this method. In other words,
     * the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, counter, bitwizeAnd;
        let sum = 0;
        let shiftedX = x;
        let counter = 0;
        let bitwizeAnd = powersTwoArray[counter];
        while(counter < 16){
            if(~((y & bitwizeAnd) = 0)){
                let sum = sum + shiftedX;
            }
            let counter = counter + 1;
            let bitwizeAnd = powersTwoArray[counter];

            let shiftedX = shiftedX + shiftedX;
        }
        return sum;
    }



    /** Returns the integer part of x/y.
     * When a Jack compiler detects the multiplication operator '/' in the
     * program's code, it handles it by invoking this method. In other words,
     * the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX, absY, q;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let q = 0;
        if(absY > absX){
            return 0;
        }
        let q = Math.divide(absX, 2 * absY);
        if ((absX - (2 * q * absY)) < absY){
            if((absX > x & absY = y) | (absX = x & absY > y)){
                return 2 * (-q);
            }
            return 2 * q;
        } else {
            if((absX > x & absY = y) | (absX = x & absY > y)){
                return (2 * (-q)) + 1;
            }
            return (2 * q) + 1;
        }
    }



    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, stop, square;
        let y = 0;
        let stop = 7;
        let square = 0;
        while(stop > -1){
            let square = y + powersTwoArray[stop];
            if((square * square > 0) & ((square * square < x) | (square * square = x))){
                let y = square;
            }
            let stop = stop - 1;
        }
        return y;
    }


    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a < b){
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }
}