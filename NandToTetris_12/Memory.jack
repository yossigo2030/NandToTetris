// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static array ram;
    static array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }


    /** Returns the RAM value at the given address. */
        function int peek(int address) {
            var int result;
            let result = ram[address];
            return result;
    }

    /** Sets the RAM value at the given address to the given value. */
        function void poke(int address, int value) {
            let ram[address] = value;
            return;
    }

    /** Finds an available RAM block of the given size and returns
     * a reference to its base address. */
        function int alloc(int size) {
            var int base, blockSize, newAlloc;
            let base = freeList;
            let blockSize = ram[base + 1];
            while(blockSize < size +2){
                let base = ram[base];
                let blockSize = ram[base + 1];
            }
            let ram[base + 1] = ram[base + 1] - size;

            let newAlloc = (ram[base + 1] - size) + base + 2;
            let ram[newAlloc] = 0;
            let ram[newAlloc + 1] = size;


            return newAlloc + 2;
        }

    /** De-allocates the given object (cast as an array) by making
     * it available for future allocations. */
        function void deAlloc(Array o) {
            var int current, next;
            let next = ram[freeList];
            while (~(next = 0)) {
                let current = next;
                let next = ram[current];
            }
            let ram[next] = o;
            return;
        }

    /** Returns the maximal element contained in the given Array/object. */
        function int max(Array o) {
            var int e;
            let e = o;
            return e;
        }
}