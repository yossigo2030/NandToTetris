// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxLen;
    field boolean minus;

    /** constructs a new empty string with a maximum length of maxLength
     * and initial length of 0. */
    constructor String new(int maxLength) {
        var int len;
        let len = maxLength;
        if(len < 1){
            let len = 1;
        }
        let str = Array.new(len);
        let length = 0;
        let maxLen = len;
        return this;
    }

/** Disposes this string. */
    method void dispose() {
        do Array.dispose(str);
        return;
    }

/** Returns the current length of this string. */
    method int length() {
        return length;
    }

/** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

/** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length = maxLen){
            return this;
        }

        let str[length] = c;
        let length = length + 1;
        return this;
    }

/** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length = 0){
            return;
        }
        let length = length - 1;
        return;
    }

/** Returns the integer value of this string,
 * until a non-digit character is detected. */
    method int intValue() {
        var int val, counter, d;
        var boolean flag;
        let flag = true;
        let counter = 0;
        let val = 0;
        let d = 0;
        if (str[counter] = 45) {
            let flag = false;
            let counter = counter + 1;
        }
        while(counter < length){
            let d = charAt(counter);
            if((d > 47) & (d < 58)){
                let d = convertStrToInt(d);
            }
            else{
                return val;
            }
            let val = val * 10 + d;
            let counter = counter + 1;
        }
        if(~(flag)){
            return -val;
        }
        return val;
    }

    method int convertStrToInt(char num) {
        return num - 48;
    }

    method int convertIntToStr(char num) {
        return num + 48;
    }


/** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, temp, c;
        if (val < 0) {
            let minus = true;
            let val = -val;
        }
        let lastDigit = val - (val / 10 * 10);
        let c = convertIntToStr(lastDigit);
        if(val < 10){
            let length = 0;
            if (minus) {
                do appendChar(45);
            }
            do appendChar(c);
        }
        else{
            do setInt(val / 10);
            do appendChar(c);
        }
        return;
    }

/** Returns the new line character. */
    function char newLine() {
        return 128;
    }

/** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

/** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}