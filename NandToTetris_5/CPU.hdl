// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
* The Hack CPU (Central Processing unit), consisting of an ALU,
* two registers named A and D, and a program counter named PC.
* The CPU is designed to fetch and execute instructions written in
* the Hack machine language. In particular, functions as follows:
* Executes the inputted instruction according to the Hack machine
* language specification. The D and A in the language specification
* refer to CPU-resident registers, while M refers to the external
* memory location addressed by A, i.e. to Memory[A]. The inM input
* holds the value of this location. If the current instruction needs
* to write a value to M, the value is placed in outM, the address
* of the target location is placed in the addressM output, and the
* writeM control bit is asserted. (When writeM==0, any value may
* appear in outM). The outM and writeM outputs are combinational:
* they are affected instantaneously by the execution of the current
* instruction. The addressM and pc outputs are clocked: although they
* are affected by the execution of the current instruction, they commit
* to their new values only in the next time step. If reset==1 then the
* CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
* than to the address resulting from executing the current instruction.
*/

CHIP CPU {

        IN inM[16],          // M value input (M = contents of RAM[A])
        instruction[16],     // Instruction for execution
        reset;               // Signals whether to re-start the current
                             // program (reset==1) or continue executing
                             // the current program (reset==0).

        OUT outM[16],        // M value output
        writeM,              // Write to M?
        addressM[15],        // Address in data memory (of M)
        pc[15];              // address of next instruction

    PARTS:
    // first mux
    Not(in=instruction[15], out= Not15);
    Mux16(a= outALU, b= instruction, sel= Not15, out= outA);

    // A register
    Or(a= Not15 , b= instruction[5], out= loadA);
    ARegister(in= outA , load= loadA, out= registerA, out[0..14]= addressM);

    // D register
    And(a=instruction[15], b= instruction[4], out= Dout);
    DRegister(in=outALU, load=Dout, out=registerD);

    // second mux
    And(a= instruction[15] , b= instruction[12], out= Ainput);
    Mux16(a=registerA, b=inM , sel=Ainput, out= inputY);

    // alu
    ALU(x=registerD, y= inputY, zx= instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out= outM, zr= zr, ng= ng);


    // writeM
    And(a=instruction[15], b=instruction[3], out= writeM);

    // pc
    Not(in=outZ, out=ZR);
    And(a=instruction[1], b=instruction[15], out=Zout);
    Not(in=Zout, out=outZ);
    And(a=ZR, b=zr, out=outputZ);

    Not(in=outN, out=NG);
    And(a=instruction[2], b=instruction[15], out=Nout);
    Not(in=Nout, out=outN);
    And(a=ng, b=NG, out=outputN);

    Not(in=zr, out=notZR);
    Not(in=ng, out=notNG);
    And(a= notZR, b= notNG, out= notNGnotZR);
    And(a=instruction[0], b=instruction[15], out=and15and0);

    Not(in=notOut, out= input);
    And(a=notZR, b=notNG, out=notZRnotNG);
    Not(in= notZRnotNG, out= notOut);
    And(a=and15and0, b=input, out=bigger0);

    Or(a=outputN, b=outputZ, out=res);
    Or(a=res, b=bigger0, out=jump);

    Not(in=jump, out=notJump);
    PC(in=registerA,load=jump,inc=notJump,reset=reset,out[0..14]=pc);
}

