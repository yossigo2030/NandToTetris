// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x",
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
    IN x[16], y[16], instruction[9];
    OUT out[16], zr, ng;

    PARTS:
    ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1],
    no=instruction[0], out=outAlu, zr=AluZr, ng=AluNg);
    ALU(x=x,y=y,zx=instruction[5],nx=instruction[4],zy=instruction[3],
    ny=instruction[2],f=instruction[1],no=instruction[0],out=AluOut);
    Mux16(a=y,b=x,sel=instruction[4],out=shift4);//if [4]==0 shift y
    ShiftLeft(in=shift4,out=shift4Left);
    ShiftRight(in=shift4,out=shift4Right);
    Mux16(a=shift4Right,b=shift4Left,sel=instruction[5],out=shift5);//if [5]==0 the shift will be a right-shift, otherwise left.
    Mux16(a=shift5,b=AluOut,sel=instruction[8],out=out, out[0..7]=out0to7, out[8..15]=out8to15, out[15]=ng);//if [8]==1 return outAlu
    Or8Way(in=out0to7, out=or1);
    Or8Way(in=out8to15, out=or2);
    Or(a=or1, b=or2, out=nZr);//check that all outAlu = 0
    Not(in=nZr, out=zr);
}